You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
textInput("caption", "Caption:", "Data Summary")
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
#
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
#
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
## Inputs and Outputs
You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.
```{r, echo=FALSE}
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
#
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r, echo=FALSE}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
shinyServer(function(input, output) {
})
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r, echo=FALSE}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
source('~/Google Drive/Business Analytics/R Group Project/ui.R')
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
```{r}
shinyServer(function(input, output) {
})
```
shinyServer(function(input, output) {
})
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
```{r}
shinyServer(function(input, output) {
})
```
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r, echo=FALSE}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```{r}
```{r}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
library(shiny)
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(position = "right",
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
```{r}
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(position = "right",
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
```{r}
library(shiny)
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(position = "right",
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
```
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
shinyUI(fluidPage(
titlePanel("title panel"),
sidebarLayout(position = "right",
sidebarPanel( "sidebar panel"),
mainPanel("main panel")
)
))
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
shinyServer(function(input, output) {
})
---
title: "server.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
shinyServer(function(input, output) {
})
library(shiny)
shinyServer(function(input, output) {
})
setwd("~/Google Drive/Business Analytics/R Group Project")
setwd("~/Google Drive/Business Analytics/R Group Project")
runApp("App")
run("App")
library(shiny)
run("App")
runApp("App")
runApp("App")
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp("App")
runApp("App")
library(shiny)
runExample("01_hello")
runApp("App")
setwd("~/Google Drive/Business Analytics/R Group Project/App")
setwd("~/Google Drive/Business Analytics/R Group Project/App")
runApp("App")
setwd("~/")
runApp("App")
setwd("~/Google Drive/Business Analytics/R Group Project/App")
runApp("App")
---
title: "ui.R"
author: "Granger Moch, Sam Eckhardt"
date: "April 9, 2015"
output: html_document
runtime: shiny
---
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
runApp("App")
runApp("App")
runApp("App")
setwd("~/Google Drive/Business Analytics/R Group Project/App")
runApp("App")
runApp("App")
setwd("~/Google Drive/Business Analytics/R Group Project")
runApp("App")
runApp("App")
runApp("App")
runExample("01_hello")
runApp("App")
runApp("App")
View(faceDatadf)
View(df)
View(faceDatadf)
summary(CarseatsModel2)
CarseatsModel2= glm(High~ Income+ ShelveLoc + Urban + Advertising, family=binomial(logit), data=Carseats, subset=Sample== "Estimation")
summary(CarseatsModel2)
CarseatsModel2= glm(High~ Income+ ShelveLoc + Urban + Advertising + US, family=binomial(logit), data=Carseats, subset=Sample== "Estimation")
summary(CarseatsModel2)
summary(CarseatsModel1)
source('~/.active-rstudio-document', echo=TRUE)
plot(perflog1predV, main="ROC Curve: Validation", col="black")
plot(perflog2predV, col="brown", add=TRUE)
plot(perfCarTreePrunedV, col="green", add=TRUE)
plot(perfRfV, col="gray", add=TRUE)
plot(perfBaggingV, col="red", add=TRUE)
legend("bottomright",  c("GLM2","GLM1", "Decision Tree","RF", "Bagging"), lty=c(1,1),col=c("black","brown", "green", "gray", "red"), horiz=FALSE)
abline(a=0,b=1,lwd=2,lty=2,col="blue")
abline(a=0,b=1,lwd=2,lty=2,col="black")
plot(perflog1predV, main="ROC Curve: Validation", col="black")
plot(perflog2predV, col="brown", add=TRUE)
plot(perfCarTreePrunedV, col="green", add=TRUE)
plot(perfRfV, col="gray", add=TRUE)
plot(perfBaggingV, col="red", add=TRUE)
legend("bottomright",  c("GLM2","GLM1", "Decision Tree","RF", "Bagging"), lty=c(1,1),col=c("black","brown", "green", "gray", "red"), horiz=FALSE)
abline(a=0,b=1,lwd=2,lty=2,col="black")
```
plot(perflog1pred, main="ROC Curve: Estimation", col="black")
plot(perflog2pred, col="brown", add=TRUE)
plot(perfCarTreePruned, col="green", add=TRUE)
plot(perfRf, col="gray", add=TRUE)
plot(perfBagging, col="red", add=TRUE)
legend("bottomright",  c("GLM2","GLM1", "Decision Tree","RF", "Bagging"), lty=c(1,1),col=c("black","brown", "green", "gray", "red"), horiz=FALSE)
abline(a=0,b=1,lwd=2,lty=2,col="black")
abline(a=0,b=1,lwd=2,lty=2,col="black")
plot(estimrocrperfglm1, main="Gains Chart- Validation Data", col="black")
plot(estimrocrperfTree1, col="green", add=TRUE)
plot(estimrocrperfBag1, col="red", add=TRUE)
plot(estimrocrperfRF1, col="gray", add=TRUE)
plot(estimrocrperfglmOld1, col="brown", add=TRUE)
legend("bottomright",  c("GLM1","Decision Tree", "Bagging","RF", "GLM2"), lty=c(1,1),col=c("black","green", "red", "gray", "brown"), horiz=FALSE)
abline(a=0,b=1,lwd=2,lty=2,col="black")
plot(estimrocrperfglm, main="Gains Chart-Estimation Data", col="black")
plot(estimrocrperfTree, col="green", add=TRUE)
plot(estimrocrperfBag, col="red", add=TRUE)
plot(estimrocrperfRF, col="gray", add=TRUE)
plot(estimrocrperfglmOld, col="brown", add=TRUE)
legend("bottomright",  c("GLM1","Decision Tree", "Bagging","RF", "GLM2"), lty=c(1,1),col=c("black","green", "red", "gray", "brown"), horiz=FALSE)
abline(a=0,b=1,lwd=2,lty=2,col="black")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp(~/App)
runApp(App)
runApp(~/"App")
runApp("~/App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
library(shiny)
runApp("App")
runApp("App")
library(shiny)
# Define UI for miles per gallon application
shinyUI(pageWithSidebar(
# Application title
headerPanel("Miles Per Gallon"),
sidebarPanel(),
mainPanel()
))
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("stockVis")
runApp("App")
runApp("App")
runApp("App")
