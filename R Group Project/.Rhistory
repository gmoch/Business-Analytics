ggplot(menarche, aes(x=Menarche/Total, y=Age)) +geom_point() +geom_smooth(stat=smooth)
ggplot(menarche, aes(x=Menarche/Total, y=Age)) +geom_point() +geom_smooth(stat="smooth")
ggplot(menarche, aes(x=Menarche/Total, y=Age)) +geom_point() +geom_smooth()
ggplot(menarche, aes(x=Menarche/Total, y=Age)) +geom_point() +geom_smooth(stat="smooth")
plot(Menarche/Total ~ Age, data=menarche)
lines(menarche$Age, glm.out$fitted, type="l", col="red")
title(main="Menarche Data with Fitted Logistic Regression Line")
ggplot(menarche, aes(x=Menarche/Total, y=Age)) +geom_point() +geom_smooth(stat="smooth")
ggplot(menarche, aes(y=Menarche/Total, x=Age)) +geom_point() +geom_smooth(stat="smooth")
plot(Menarche/Total ~ Age, data=menarche)
lines(menarche$Age, glm.out$fitted, type="l", col="red")
ggplot(menarche, aes(y=Menarche/Total, x=Age)) +geom_point() +geom_smooth(stat="smooth")
summary(glm.out)
anova(glm.out)
View(menarche)
library(Rcmdrplugin.BCA)
install.packages("RXKCD", repos="http://R-Forge.R-project.org",type="source")
searchXKCD("support")
searchXKCD("support")
library(devtools)
lib <- paste(getwd(),"shinyData_lib",sep="/")
dir.create(lib)
with_lib(lib,{
install_github("trestletech/shinyTree@522f8a7e28565bec0f634faf5aa1e75da247de44")
install_github("trestletech/shinyAce@a2268d545e0ea30eb44c9dca517aec1165b06a51")
install_github("ebailey78/shinyBS", ref = "shinyBS3")
install_github("AnalytixWare/ShinySky@15c29bec4e7c5e694625e571656515a8ace7f376")
install_github("yindeng/shinyData@v0.1.1")
library("shinyData")
shinyData()
})
View(brewer.mat)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
View(data)
View(data)
library(dplyr)
View(data)
test= data %>%
filter(Sex=="Male")%>%
arrange(desc)
View(test)
test= data %>%
filter(Sex=="male")%>%
arrange(desc)
test= data %>%
filter(Sex=="male") %>%
arrange(desc)
View(test)
View(data)
test= data %>%
filter(Sex==male) %>%
arrange(desc)
test= data %>%
filter(Sex!="male") %>%
arrange(desc)
View(test)
View(test)
View(data)
test= data %>%
filter(data$Sex!="male") %>%
arrange(desc)
test= data %>%
filter(data$Sex!="male") %>%
arrange(desc())
test= data %>%
filter(data$Sex!="male")
View(test)
View(test)
test= data %>%
filter(data$Sex=="male")
View(test)
test= data %>%
filter(data$Sex=="male")%>%
arrange(desc)
View(data)
test= data %>%
filter(data$Sex=="male")%>%
arrange(desc(Age))
View(test)
View(test)
View(data)
View(data)
View(data)
View(data)
model1=glm(Survived~ PClass, Age, Sex)
model1=glm(Survived~ PClass, age, Sex)
View(data)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
model1=glm(Survived~ PClass, Age, Sex)
model1=glm(data$Survived~ data$PClass, data$Age, data$Sex)
model1=glm(Survived~ PClass, Age, Sex)
View(data)
str(data)
model1=glm(Survived~ PClass,Age,Sex)
model1=glm(Survived~ PClass,Age,Sex, family=binomial(logit), data=data)
model1=glm(Survived~ PClass + Age + Sex, family=binomial(logit), data=data)
summary(model1)
step()
?step()
step(model1, direction="backward")
summary(model1)
?bin.var()
??bin.var()
bin.var(Age, bins 4, method=c("proportions"))
bin.var(Age, bins=4, method=c("proportions"))
library(BCA)
bin.var(Age, bins=4, method=c("proportions"))
View(data)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
Age.Cat=bin.var(Age, bins=4, method=c("proportions"))
library(BCA)
Age.Cat=bin.var(Age, bins=4, method=c("proportions"))
View(data)
library(RcmdrMisc)
Age.Cat=bin.var(Age, bins=4, method=c("proportions"))
Age.Cat=bin.var(Age, bins=4, method="prop"))
Age.Cat=bin.var(Age, bins=4, method="prop")
with(CCS, bin.var(Age, bins=4,, method='proportions',
labels=NULL))
with(model1, bin.var(Age, bins=4,, method='proportions',
labels=NULL))
with(model1, bin.var(Age, bins=4,, method='proportions',
labels=NULL))
with(data, bin.var(Age, bins=4,, method='proportions',
labels=NULL))
with(data, bin.var(Age, bins=4,method='proportions',
labels=NULL))
View(data)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
data$Age.Cat=with(data, bin.var(Age, bins=4,method='proportions',
labels=NULL))
View(data)
str(data)
factor(data$Age.Cat, labels=c("1","2","3","4"))
View(data)
data$Age.Cat=factor(data$Age.Cat, labels=c("1","2","3","4"))
View(data)
model1=glm(Survived~ PClass + Age + Age.Cat+ Sex, family=binomial(logit), data=data)
summary(model1)
step(model1, direction="backward")
str(data)
summary(model1)
agetest=data %>%
filter(Age.Cat=="3"||"4")
View(agetest)
agetest=data %>%
filter(Age.Cat=="3"|| Age.Cat=="4")
agetest=data %>%
filter(Age.Cat=="3")
agetest=data %>%
filter(Age.Cat=="4")
agetest=data %>%
filter(Age.Cat=="3")
View(data)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
data$Age.Cat=with(data, bin.var(Age, bins=4,method='proportions',
labels=NULL))
View(data)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
data$Age.Cat=with(data, bin.var(Age, bins=6,method='proportions',
labels=NULL))
View(data)
data$Age.Cat=factor(data$Age.Cat, labels=c("1","2","3","4","5","6"))
View(data)
model1=glm(Survived~ PClass + Age + Age.Cat+ Sex, family=binomial(logit), data=data)
summary(model1)
model1=glm(Survived~ PClass + Age.Cat+ Sex, family=binomial(logit), data=data)
summary(model1)
step(model1, direction="backwards")
step(model1, direction="backward")
step(model1, direction="forward")
summary(model1)
runApp("App")
library(shiny)
runApp("App")
setwd("~/Google Drive/Business Analytics/R Group Project")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
output$URL2 <- renderText(input$URL)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
rekURL="http://rekognition.com/func/api/?api_key=Rcl2sf7etxRQSP99&api_secret=CviqfsiQ7AgjgaCb&jobs=face_gender_part_age_race_beard&urls="
library(shiny)
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
shiny::runApp('App')
shiny::runApp('App')
fullUrl=paste(rekURL, input$url)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
library(shiny)
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
library(stringr)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
str(rekURL)
as.string(rekURL)
toString(rekURL)
str(rekURL)
rekURL=toString(rekURL)
rekURL
str(rekURL)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
photoURL=readline(prompt="Enter a URL:")
fullURL=paste(rekURL, photoURL, sep="")
source('~/.active-rstudio-document', echo=TRUE)
View(faceDatadf)
---
title: "Rekognition"
author: "Granger Moch, Sam Eckhardt"
date: "April 8, 2015"
output: html_document
---
```{r}
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
```
```{r}
rekURL="http://rekognition.com/func/api/?api_key=Rcl2sf7etxRQSP99&api_secret=CviqfsiQ7AgjgaCb&jobs=face_gender_part_age_race_beard&urls="
photoURL=readline(prompt="Enter a URL:")
faceData=getURL(fullURL)
faceData=strsplit(faceData, '\"')
#Beard
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
Beard=as.factor(ifelse(Beard=="0", "No", "Yes"))
#Gender
Gender=faceData[[1]][[91]]
Gender=substr(Gender, 2, 2)
Gender=as.factor(ifelse(Gender=="0", "Female", "Male"))
#Age
Age=faceData[[1]][[85]]
Age=substr(Age, 2, 4)
Age= as.numeric(Age)
#Race
Race=faceData[[1]][[76]]
Race=substr(Race, 0, 6)
Race=capitalize(Race)
#Create Dataframe
faceDatadf= data.frame(Gender, Beard, Age, Race)
```
#Testing
```{r}
faceDatadf
```
faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
rekURL="http://rekognition.com/func/api/?api_key=Rcl2sf7etxRQSP99&api_secret=CviqfsiQ7AgjgaCb&jobs=face_gender_part_age_race_beard&urls="
photoURL=readline(prompt="Enter a URL:")
faceData=getURL(fullURL)
faceData=strsplit(faceData, '\"')
#Beard
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
Beard=as.factor(ifelse(Beard=="0", "No", "Yes"))
#Gender
Gender=faceData[[1]][[91]]
Gender=substr(Gender, 2, 2)
Gender=as.factor(ifelse(Gender=="0", "Female", "Male"))
#Age
Age=faceData[[1]][[85]]
Age=substr(Age, 2, 4)
Age= as.numeric(Age)
#Race
Race=faceData[[1]][[76]]
Race=substr(Race, 0, 6)
Race=capitalize(Race)
#Create Dataframe
faceDatadf= data.frame(Gender, Beard, Age, Race)
faceData=strsplit(faceData, '\"')
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
faceData=strsplit(faceData, '\"')
library(stringr)
faceData=strsplit(faceData, '\"')
rekURL="http://rekognition.com/func/api/?api_key=Rcl2sf7etxRQSP99&api_secret=CviqfsiQ7AgjgaCb&jobs=face_gender_part_age_race_beard&urls="
photoURL=readline(prompt="Enter a URL:")
fullURL=paste(rekURL, photoURL, sep="")
faceData=getURL(fullURL)
faceData=strsplit(faceData, '\"')
#Beard
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
Beard=as.factor(ifelse(Beard=="0", "No", "Yes"))
#Gender
Gender=faceData[[1]][[91]]
Gender=substr(Gender, 2, 2)
Gender=as.factor(ifelse(Gender=="0", "Female", "Male"))
#Age
Age=faceData[[1]][[85]]
Age=substr(Age, 2, 4)
Age= as.numeric(Age)
#Race
Race=faceData[[1]][[76]]
Race=substr(Race, 0, 6)
Race=capitalize(Race)
#Create Dataframe
faceDatadf= data.frame(Gender, Beard, Age, Race)
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
Beard=substr(Beard, 2, 2)
Beard=substr(Beard, 2, 2)
Beard=substr(Beard, 2, 3)
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 3)
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
View(faceDatadf)
faceData=strsplit(faceData, '\"')
faceData=strsplit(faceData, '\"')
---
title: "Rekognition"
author: "Granger Moch, Sam Eckhardt"
date: "April 8, 2015"
output: html_document
---
```{r}
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
```
```{r}
rekURL="http://rekognition.com/func/api/?api_key=Rcl2sf7etxRQSP99&api_secret=CviqfsiQ7AgjgaCb&jobs=face_gender_part_age_race_beard&urls="
photoURL=readline(prompt="Enter a URL:")
faceData=getURL(fullURL)
faceData=strsplit(faceData, '\"')
```
#Beard
```{r}
Beard=faceData[[1]][[87]]
Beard=substr(Beard, 2, 2)
Beard=as.factor(ifelse(Beard=="0", "No", "Yes"))
```
#Gender
```{r}
Gender=faceData[[1]][[91]]
Gender=substr(Gender, 2, 2)
Gender=as.factor(ifelse(Gender=="0", "Female", "Male"))
```
#Age
```{r}
Age=faceData[[1]][[85]]
Age=substr(Age, 2, 4)
Age= as.numeric(Age)
```
#Race
```{r}
Race=faceData[[1]][[76]]
Race=substr(Race, 0, 6)
Race=capitalize(Race)
```
#Create Dataframe
```{r}
faceDatadf= data.frame(Gender, Beard, Age, Race)
```
#Testing
```{r}
faceDatadf
```
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(faceDatadf)
faceDatadf
faceData
faceData
nosePosition=[[1]][[36]]
nosePosition= faceData[[1]][[36]]
nosePosition= faceData[[1]][[36]]
nosePosition= faceData[[1]][[37]]
nosePosition= faceData[[1]][[38]]
noseX= faceData[[1]][[39]]
faceData
noseY= faceData[[1]][[107.6]]
noseY= faceData[[1]][[41]]
noseX= faceData[[1]][[39]]
noseY= faceData[[1]][[41]]
faceDatadf= data.frame(Gender, Beard, Age, Race, noseX, noseY)
View(faceDatadf)
noseX=substr(noseX, 2, 4)
noseX= faceData[[1]][[39]]
noseX=substr(noseX, 2, 5)
noseY= substr(noseY, 2, 5)
noseX= faceData[[1]][[39]]
noseX=substr(noseX, 2, 6)
noseX=substr(noseX, 2, 5)
noseX= faceData[[1]][[39]]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(faceDatadf)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
```{r}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(faceDatadf)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
library(shiny)
library(RCurl)
library(XML)
library(RJSONIO)
library(plyr)
library(stringr)
library(Hmisc)
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
library(shiny)
runGitHub("grangershiny", "patilv")
shiny::runApp('~/Downloads/grangershiny-master')
shiny::runApp('~/Downloads/grangershiny-master')
